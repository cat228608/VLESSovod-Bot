import random
import os
from aiogram import types, Dispatcher
from aiogram.types import InputFile, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import db
from utils import add_client, check_stats, generate_qr_code

def get_main_menu(user_has_config: bool):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    if user_has_config:
        keyboard.add(KeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"), KeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"))
    else:
        keyboard.add(KeyboardButton("–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥"), KeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"))
    return keyboard

def register_handlers(dp: Dispatcher):
    @dp.message_handler(commands=["start"])
    async def start_cmd(msg: types.Message):
        user_id = msg.from_user.id
        config = db.get_user_config(user_id)
        has_config = config is not None
        menu = get_main_menu(has_config)
        await msg.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VLESSovod! üëã", reply_markup=menu)

    @dp.message_handler(lambda m: m.text == "–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥")
    async def handle_create_config(message: types.Message):
        user_id = message.from_user.id
        if db.get_user_config(user_id):
            await message.answer("‚ùó –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è.")
            return

        servers = db.get_all_servers()
        if not servers:
            await message.answer("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.")
            return

        markup = InlineKeyboardMarkup()
        for server_id, name, user_count in servers:
            button_text = f"{name} [{user_count}/150]"
            markup.add(InlineKeyboardButton(text=button_text, callback_data=f"server_{server_id}"))

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:", reply_markup=markup)
        
    @dp.message_handler(lambda m: m.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
    async def view_config_handler(message: types.Message):
        user_id = message.from_user.id
        config = db.get_user_config(user_id)
        if not config:
            await message.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –°–æ–∑–¥–∞–π—Ç–µ –µ–µ.", reply_markup=get_main_menu(False))
            return

        _, _, config_url = config
        qr_filename = f"{user_id}_qr_code.png"
        qr_result = generate_qr_code(config_url, qr_filename)

        if qr_result == 'error':
            await message.answer(f"‚úÖ –í–∞—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:\n<code>{config_url}</code>", parse_mode="HTML")
        else:
            await message.bot.send_photo(
                chat_id=message.chat.id,
                photo=InputFile(qr_filename),
                caption=f"‚úÖ –í–∞—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:\n<code>{config_url}</code>",
                parse_mode="HTML"
            )
            if os.path.exists(qr_filename):
                os.remove(qr_filename)
                
    @dp.message_handler(lambda m: m.text == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
    async def profile_handler(message: types.Message):
        await message.reply(""" 
<i>–ì–∞–π–¥ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ VLESS –∫–æ–Ω—Ñ–∏–≥–æ–≤ –æ—Ç –±–æ—Ç–∞</i>  

–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ VLESS –∫–æ–Ω—Ñ–∏–≥–∞–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ —ç—Ç–∏–º –ø—Ä–æ—Å—Ç—ã–º —à–∞–≥–∞–º:  

1. <i>–ü–æ–ª—É—á–µ–Ω–∏–µ –ö–æ–Ω—Ñ–∏–≥–∞:</i>  
   - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <i>¬´–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥¬ª</i>.  
   - –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –ª–æ–∫–∞—Ü–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.  
   - –ë–æ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –≤—ã–≤–µ–¥–µ—Ç VLESS –∫–æ–Ω—Ñ–∏–≥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:  

<code>vless://—Ç—É—Ç–ö–æ–Ω—Ñ–∏–≥</code>  

2. <i>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ö–æ–Ω—Ñ–∏–≥–∞ –Ω–∞ Android:</i>  

<b>Amnezia VPN:</b>  
   - –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Amnezia VPN –∏–∑ Google Play:  
     <a href="https://play.google.com/store/apps/details?id=org.amnezia.vpn">Amnezia VPN</a>  
   - –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ <i>¬´–î–æ–±–∞–≤–∏—Ç—å¬ª</i> –∏–ª–∏ <i>¬´–ò–º–ø–æ—Ä—Ç¬ª</i>.  
   - –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –±–æ—Ç–∞ –∫–æ–Ω—Ñ–∏–≥ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ.  
   - –ù–∞–∂–º–∏—Ç–µ <i>¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª</i> –∏–ª–∏ <i>¬´–ò–º–ø–æ—Ä—Ç¬ª</i>.  
   - –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –∫–æ–Ω—Ñ–∏–≥—É.  

<b>v2rayTun:</b>  
   - –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ v2rayTun –∏–∑ Google Play:  
     <a href="https://play.google.com/store/apps/details?id=com.v2raytun.android">v2rayTun</a>  
   - –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –±–æ—Ç–∞ –∫–æ–Ω—Ñ–∏–≥.  
   - –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ v2rayTun –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <i>¬´–ø–ª—é—Å¬ª</i> <b>+</b>.  
   - –í—ã–±–µ—Ä–∏—Ç–µ <i>¬´–ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞¬ª</i>.  
   - –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <i>¬´–°—Ç–∞—Ä—Ç¬ª</i> –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.  

3. <i>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ö–æ–Ω—Ñ–∏–≥–∞ –Ω–∞ iOS:</i>  

<b>Amnezia VPN:</b>  
   - –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Amnezia VPN –∏–∑ App Store:  
     <a href="https://apps.apple.com/us/app/amneziavpn/id1600529900">Amnezia VPN</a>  
   - –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ <i>¬´–î–æ–±–∞–≤–∏—Ç—å¬ª</i> –∏–ª–∏ <i>¬´–ò–º–ø–æ—Ä—Ç¬ª</i>, —Ç–∞–∫ –∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å QR –∫–æ–¥.  
   - –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –±–æ—Ç–∞ –∫–æ–Ω—Ñ–∏–≥ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ.  
   - –ù–∞–∂–º–∏—Ç–µ <i>¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª</i> –∏–ª–∏ <i>¬´–ò–º–ø–æ—Ä—Ç¬ª</i>.  
   - –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –∫–æ–Ω—Ñ–∏–≥—É.  

<b>V2ray tun:</b>
   - –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2ray tun –∏–∑ App Store:  
     <a href="https://apps.apple.com/ru/app/v2raytun/id6476628951">V2ray tun</a>
   - –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –±–æ—Ç–∞ –∫–æ–Ω—Ñ–∏–≥ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.  
   - –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ <i>¬´+¬ª</i>, –ø–æ—Å–ª–µ —á–µ–≥–æ <i>–î–æ–±–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞</i>. –¢–∞–∫ –∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å QR –∫–æ–¥.  
   - –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –∫–æ–Ω—Ñ–∏–≥—É.  

4. <i>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ö–æ–Ω—Ñ–∏–≥–∞ –Ω–∞ Windows:</i>  

<b>Amnezia VPN:</b>  
   - –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Amnezia VPN —Å –≥–∏—Ç—Ö–∞–±–∞:  
     <a href="https://github.com/amnezia-vpn/amnezia-client/releases">Amnezia VPN</a>  
   - –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –ø–µ—Ä–µ–¥ –≤–∞–º–∏ –±—É–¥–µ—Ç –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∫–ª—é—á–∞.
   - –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –±–æ—Ç–∞ –∫–æ–Ω—Ñ–∏–≥ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ.  
   - –ù–∞–∂–º–∏—Ç–µ <i>¬´–í—Å—Ç–∞–≤–∏—Ç—å¬ª</i>.  
   - –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –∫–æ–Ω—Ñ–∏–≥—É. 

<b>V2rayN:</b>
   - –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2rayN —Å –≥–∏—Ç—Ö–∞–±–∞:  
     <a href="https://github.com/2dust/v2rayN/releases">V2rayN</a>
   - –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –±–æ—Ç–∞ –∫–æ–Ω—Ñ–∏–≥ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.  
   - –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∫–ª–∞–≤–∏—à—å <i>¬´Ctrl + V¬ª</i>, –∏–ª–∏ –∂–µ –Ω–∞ <i>–°–µ—Ä–≤–µ—Ä–∞</i> –∏ <i>–ò–º–ø–æ—Ä—Ç –º–∞—Å—Å–∏–≤–∞ Url —Å –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞</i>.  
   - –ö–∞–∫ –∫–æ–Ω—Ñ–∏–≥ –≤—Å—Ç–∞–≤–∏–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å <i>Enable Tun</i> –∏–ª–∏ <i>–†–µ–∂–∏–º VPN</i>. 
""", parse_mode="HTML")
                
    @dp.message_handler(lambda m: m.text == "–ü—Ä–æ—Ñ–∏–ª—å")
    async def profile_handler(message: types.Message):
        user_id = message.from_user.id
        config = db.get_user_config(user_id)
        
        profile_text = f"<b>üìù –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>:\n\nüîë <b>ID:</b> <code>{user_id}</code>\n"

        if config:
            server_id, config_id, _ = config
            server = db.get_server_by_id(server_id)
            if server:
                url, username, password = server
                traffic_data = check_stats(url, username, password, config_id)
                if traffic_data:
                    traffic_info = (f"\n<b>üìä –¢—Ä–∞—Ñ–∏–∫ –∫–æ–Ω—Ñ–∏–≥–∞</b>:\n"
                                    f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ: <i>{traffic_data['down']:.2f} MB</i>\n"
                                    f"üì§ –í—ã–≥—Ä—É–∂–µ–Ω–æ: <i>{traffic_data['up']:.2f} MB</i>")
                    profile_text += traffic_info
        else:
            profile_text += "\n–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."

        await message.reply(profile_text, parse_mode="HTML")

    @dp.callback_query_handler(lambda c: c.data.startswith("server_"))
    async def server_selected(callback_query: types.CallbackQuery):
        user_id = callback_query.from_user.id
        server_id = int(callback_query.data.split("_")[1])

        if db.get_user_config(user_id):
            await callback_query.message.answer("‚ùó –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è.")
            await callback_query.answer()
            return

        server = db.get_server_by_id(server_id)
        if not server:
            await callback_query.message.answer("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await callback_query.answer()
            return
            
        if db.get_server_user_count(server_id) >= 150:
            await callback_query.message.answer("üö´ –í—Å–µ –º–µ—Å—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∑–∞–Ω—è—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")
            await callback_query.answer()
            return

        await callback_query.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
        url, username, password = server
        config_id_num = int("".join([str(random.randint(0, 9)) for _ in range(7)]))
        config_id_str = str(user_id) + "_" + str(config_id_num)

        conf = {
            "id": config_id_str, "flow": "xtls-rprx-vision", "email": config_id_str, "limitIp": 0,
            "totalGB": 0, "expiryTime": 0, "enable": True, "tgId": str(user_id), "subId": "", "reset": 0
        }
        
        config_url = add_client(url, username, password, server_id, conf, config_id_str, sni='t.me')

        if config_url == 'error':
            await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        db.save_user_config(user_id, server_id, config_id_str, config_url)
        qr_filename = f"{user_id}_qr_code.png"
        generate_qr_code(config_url, qr_filename)
        await callback_query.bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
        
        menu = get_main_menu(user_has_config=True)
        await callback_query.bot.send_photo(
            chat_id=callback_query.message.chat.id,
            photo=InputFile(qr_filename),
            caption=f"‚úÖ –í–∞—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:\n<code>{config_url}</code>",
            parse_mode="HTML",
            reply_markup=menu
        )
        if os.path.exists(qr_filename):
            os.remove(qr_filename)
